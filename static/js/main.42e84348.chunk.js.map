{"version":3,"sources":["components/logo/brain.png","components/logo/Logo.js","components/imageLinkForm/ImageLinkForm.js","components/faceRecognition/FaceRecognition.js","components/prediction/Prediction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","tilt_default","options","max","style","height","width","alt","src","brain","Component","ImageLinkForm","placeholder","type","onChange","this","props","onInputChange","onClick","onSubmit","FaceRecognition","id","imageURL","boxes","map","box","i","key","left","leftCol","top","topRow","Prediction","info","person","data","face","gender_appearance","concepts","gender","name","value","age_appearance","multicultural_appearance","ethnicity","app","Clarifai","App","apiKey","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","setState","input","target","calculateFaceLocation","regions","faces","outputs","image","document","getElementById","imageRect","getBoundingClientRect","Number","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","bbox","region_info","bounding_box","push","left_col","top_row","right_col","bottom_row","err","return","displayFaces","bboxes","populateDemographicInfo","console","log","state","models","predict","DEMOGRAPHICS_MODEL","then","response","catch","particles_default","params","particles","number","density","enable","value_area","logo_Logo","imageLinkForm_ImageLinkForm","faceRecognition_FaceRecognition","prediction_Prediction","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42e84348.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.ff8a4ad9.png\";","import React, { Component } from 'react';\nimport './logo.css';\nimport brain from './brain.png';\nimport Tilt from 'react-tilt';\n\nclass Logo extends Component {\n    render() {\n        return (\n            <div className='ma4 mt0'>\n                <Tilt className=\"Tilt\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\n                    <div className=\"Tilt-inner\"><img alt='brain' src={brain}/></div>\n                </Tilt>\n            </div>\n        )\n    }\n}\n\nexport default Logo;","import React, { Component } from 'react';\nimport './imageLinkForm.css';\n\nclass ImageLinkForm extends Component {\n    render() {\n        return (\n            <div>\n                <p className='f3'>\n                    {'Make a demographic prediction about people in an image!'}\n                </p>\n                <div className='center'>\n                    <div className='form center pa4 br3 shadow-5'>\n                        <input placeholder='image url' className='f4 pa2 w-70 center' type='tex' onChange={this.props.onInputChange}/>\n                        <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\n                                onClick={this.props.onSubmit}>Predict</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ImageLinkForm;","import React, { Component } from 'react';\nimport './faceRecognition.css';\n\nclass FaceRecognition extends Component {\n    render() {\n        return (\n            <div>\n                <img id='inputimage' src={this.props.imageURL} alt='' width='500px' height='auto'/>\n                {this.props.boxes.map((box, i) => <div className='bounding-box' key={i}\n                      style={{left: box.leftCol, top: box.topRow, width: box.width, height: box.height}}/>)}\n            </div>\n        )\n    }\n}\n\nexport default FaceRecognition;","import React, { Component } from 'react';\nimport './prediction.css';\n\nclass Prediction extends Component {\n    render() {\n        return (\n            <div className='container'>\n                <div className='title'>\n                    <h3>Demographic Prediction</h3>\n                    <h6>Right to left</h6>\n                </div>\n                {this.props.info.map((person, i) => {\n                    return (<div className='predictedPerson' key={i}>\n                        <div className='gender'>\n                            <div className='section'><h5>Gender Probabilities</h5></div>\n                            {person.data.face.gender_appearance.concepts.map((gender, i) => {\n                                return (\n                                    <div className='element' key={i}>\n                                        <span className='attribute'>{gender.name}:</span><span className='value'>{gender.value}</span>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <div className='age'>\n                            <div className='section'><h5>Age Prediction</h5></div>\n                            <div className='element' key={i}>\n                                <span className='attribute'>{person.data.face.age_appearance.concepts[0].name}:</span><span className='value'>{person.data.face.age_appearance.concepts[0].value}</span>\n                            </div>\n                        </div>\n                        <div className='ethnicity'>\n                            <div className='section'><h5>Multicultural Appearances</h5></div>\n                            {person.data.face.multicultural_appearance.concepts.map((ethnicity, i) => {\n                                return (\n                                    <div className='element' key={i}>\n                                        <span className='attribute'>{ethnicity.name}:</span><span className='value'>{ethnicity.value}</span>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>)\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Prediction;","import React, { Component } from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n// import NavBar from './components/navbar/NavBar';\nimport Logo from './components/logo/Logo';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/faceRecognition/FaceRecognition';\nimport Prediction from \"./components/prediction/Prediction\";\n\nconst app = new Clarifai.App({\n    apiKey: '9f107e133e3c48e7a8a26bef610770e9'\n});\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n            imageURL: '',\n            boxes: [],\n            info: [],\n        }\n    }\n\n    onInputChange = (event) => {\n        this.setState({input: event.target.value});\n    };\n\n    calculateFaceLocation = (data) => {\n        let regions = [];\n        let faces = data.outputs[0].data.regions;\n        const image = document.getElementById('inputimage');\n        const imageRect = image.getBoundingClientRect();\n        const width = Number(image.width);\n        const height = Number(image.height);\n        for (let face of faces) {\n            let bbox = face.region_info.bounding_box;\n            regions.push({\n                leftCol: imageRect.left + (bbox.left_col * width),\n                topRow: imageRect.top + (bbox.top_row * height),\n                width: imageRect.left + (bbox.right_col * width) - (imageRect.left + (bbox.left_col * width)),\n                height: imageRect.top + (bbox.bottom_row * height) - (imageRect.top + (bbox.top_row * height)),\n            })\n        }\n        return regions;\n    };\n\n    displayFaces = (bboxes) => {\n        this.setState({boxes: bboxes});\n    };\n\n    populateDemographicInfo = (data) => {\n        this.setState({info: data.outputs[0].data.regions});\n        console.log(data.outputs[0].data.regions);\n    };\n\n    onSubmit = () => {\n        this.setState({imageURL: this.state.input});\n        app.models.predict(Clarifai.DEMOGRAPHICS_MODEL, this.state.input)\n            .then(response => {\n                this.displayFaces(this.calculateFaceLocation(response));\n                this.populateDemographicInfo(response);\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Particles className='particles'\n                    params={{\n                        particles: {\n                            number: {\n                                value: 100,\n                                density: {\n                                    enable: true,\n                                    value_area: 800\n                                }\n                            }\n                        }\n                    }}\n                />\n                {/*<NavBar/>*/}\n                <Logo/>\n                <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit}/>\n                <FaceRecognition imageURL={this.state.imageURL} boxes={this.state.boxes}/>\n                <Prediction imageURL={this.state.imageURL} info={this.state.info}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}